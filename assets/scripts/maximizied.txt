// Параметры отрисовки
let moveCounter = 0
let time = 0

let startTime = true
const intervalRefresh = setInterval(startTime, 1000)

let countCells
let gameType = '4'
let itemNodes
let matrix

let sizeCell
let playGame = false
let playAudio = true
let resultArray = []

// Сreate Element для создания жлемментов на странице
// созадется хедер
const header = document.createElement('header')
header.className = 'header'
document.body.append(header)

// создается заголок хедера
const h1 = document.createElement('h1')
header.className = 'header'
h1.innerHTML = 'Puzzle Game'

// создается панель управления игрой
const controlPanel = document.createElement('div')
controlPanel.className = 'control-panel'

// добавляется к хедеру
header.append(h1, controlPanel)

// создание элемента\кнопки перемешивания элементов
const shuffleBtn = document.createElement('button')
shuffleBtn.innerHTML = 'shuffle'
// создание кнопки сохранения
const saveBtn = document.createElement('button')
saveBtn.innerHTML = 'Save'
// загрузки
const loadBtn = document.createElement('button')
loadBtn.innerHTML = 'Load'
// звук
const soundBtn = document.createElement('button')
soundBtn.innerHTML = 'Sound'
// результат
const resBtn = document.createElement('button')
resBtn.innerHTML = 'Result'
// добавление элементов в панелю инструментов
controlPanel.append(shuffleBtn, saveBtn, loadBtn, soundBtn, resBtn)
// главная часть. тег main
const mainSection = document.createElement('main')
mainSection.className = 'main'
header.after(mainSection)
// счетчики
const scoreWrapper = document.createElement('div')
scoreWrapper.className = 'score-wrapper'
mainSection.append(scoreWrapper)
// движений
const movesWrapper = document.createElement('span')
movesWrapper.className = 'moves'
movesWrapper.innerHTML = 'Moves: 0'
// времени
const timeWrapper = document.createElement('span')
timeWrapper.className = 'time'
timeWrapper.innerHTML = 'Time: 00:00'
// добавление счетчиков
scoreWrapper.append(timeWrapper, movesWrapper)
// создание главной части страницы
const page = document.createElement('div')
page.className = 'page'
mainSection.append(page)
// Создание поля самой игры
const wrapperNodeDiv = document.createElement('div')
wrapperNodeDiv.className = 'fifteen'
page.append(wrapperNodeDiv)
// создание футера
const footer = document.createElement('footer')
footer.className = 'footer'
mainSection.after(footer)
// кнопки управления размером
const fieldSizeWrapper = document.createElement('div')
fieldSizeWrapper.className = 'field-param__wrapper'
footer.append(fieldSizeWrapper)
// создание, отображение и определение активной кнопки
for (i = 3; i <= 8; i++) {
  const fieldParam = document.createElement('button')
  fieldParam.className = 'field-param'
  fieldParam.id = `${i}`
  fieldParam.innerHTML = `${i} x ${i}`
  fieldSizeWrapper.append(fieldParam)

  if (i === 4) {
    fieldParam.classList.add('active')
  }
}
// обработчик размера
function fieldSizeClickHandler() {
  document
    .querySelector('.field-param__wrapper')
    .addEventListener('click', (event) => {
      if (event.target.classList.contains('field-param')) {
        document.querySelectorAll('.field-param').forEach((item) => {
          item.classList.remove('active')
        })
        event.target.classList.add('active')
        showMovesAndTime()
      }
    })
}

fieldSizeClickHandler()

// определение клеток и добавление им слушателей
const containerNode = document.querySelector('.fifteen')
const fieldSize = document.querySelectorAll('.field-param')

fieldSize.forEach((item) => {
  item.addEventListener('click', () => {
    gameType = item.id
    addItemNodes(gameType)
  })
})

function addItemNodes(typeGame) {
  wrapperNodeDiv.innerHTML = ''

  sizeCell = typeGame
  countCells = typeGame * typeGame

  let startArray = [...Array(countCells).keys()]

  startArray.forEach((index) => {
    const itemDiv = document.createElement('div')
    itemDiv.className = 'cell'
    itemDiv.innerHTML = `${index + 1}`
    itemDiv.id = `${index + 1}`
    wrapperNodeDiv.append(itemDiv)

    itemDiv.style.width = `${100 / sizeCell}%`
    itemDiv.style.height = `${100 / sizeCell}%`

    itemDiv.draggable = !0
    itemDiv.addEventListener('dragstart', (event) => {
      event.dataTransfer.setData('id', event.target.id)
    })
  })

  itemNodes = Array.from(wrapperNodeDiv.querySelectorAll('.cell'))

  matrix = getMatrix(itemNodes.map((item) => Number(item.id)))

  itemNodes[countCells - 1].style.display = 'none'

  shuffleCells()

  if (playGame) {
    matrix = JSON.parse(localStorage.getItem('matrix'))
    typeGame = Number(localStorage.getItem('typeGame'))

    playAudio = !playAudio
    if (!!!playAudio) {
      soundBtn.innerHTML = 'muted'
    } else {
      soundBtn.innerHTML = 'unmuted'
    }

    const fieldSizeSave = document.querySelectorAll('.field-param')

    fieldSizeSave.forEach((value, index) => {
      value.classList.remove('active')

      if (index + 3 === typeGame) {
        value.classList.add('active')
      }
    })
  }
}

addItemNodes(gameType)
setPositionCells(matrix)

// ..........2. Shuffle

shuffleBtn.addEventListener('click', () => {
  shuffleCells()
  showMovesAndTime()
})

function shuffleCells() {
  const flatMatrix = matrix.flat()
  let shuffleArray = shuffle(flatMatrix)

  while (!searchDecideArray(shuffleArray)) {
    shuffleArray = shuffle(flatMatrix)
  }

  matrix = getMatrix(shuffleArray)

  setPositionCells(matrix)
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1))
    ;[array[i], array[j]] = [array[j], array[i]]
  }
  return array
}

function searchDecideArray(array) {
  let countInversions = 0
  let newArray = array.slice()
  let blankRowPosition =
    Math.ceil((newArray.indexOf(countCells) + 1) / Math.sqrt(countCells)) - 1
  newArray.splice(newArray.indexOf(countCells), 1)

  for (let i = 0; i < newArray.length; i++) {
    for (let j = i; j < newArray.length; j++) {
      if (newArray[i] > newArray[j]) {
        countInversions++
      }
    }
  }

  if (!(countCells % 2 === 0) && countInversions % 2 === 0) {
    return true
  } else if (
    !((countInversions + blankRowPosition) % 2 === 0) &&
    countCells % 2 === 0
  ) {
    return true
  } else {
    return false
  }
}

// ..........3. Change position by click

containerNode.addEventListener('click', (event) => {
  const buttonNode = event.target.closest('.cell')

  if (!buttonNode) {
    return
  }

  const buttonNumber = Number(buttonNode.id)
  const buttonCoords = findCoordinatesByNumber(buttonNumber, matrix)
  const blankCoords = findCoordinatesByNumber(countCells, matrix)
  const isValid = isValidForSwap(buttonCoords, blankCoords)

  if (isValid) {
    changeAudio(playAudio)

    swap(blankCoords, buttonCoords, matrix)
    setPositionCells(matrix)
  }
})

// драг-дроп
containerNode.addEventListener('dragover', (event) => {
  event.preventDefault()
})

containerNode.addEventListener('drop', (event) => {
  const buttonNode = document.getElementById(event.dataTransfer.getData('id'))

  if (!buttonNode) {
    return
  }

  const buttonNumber = Number(buttonNode.id)
  const buttonCoords = findCoordinatesByNumber(buttonNumber, matrix)
  const blankCoords = findCoordinatesByNumber(countCells, matrix)
  const isValid = isValidForSwap(buttonCoords, blankCoords)

  if (isValid) {
    changeAudio(playAudio)

    swap(blankCoords, buttonCoords, matrix)
    setPositionCells(matrix)
  }
})

// управление стрелками

window.addEventListener('keydown', (event) => {
  if (!event.key.includes('Arrow')) {
    return
  }

  const blankCoords = findCoordinatesByNumber(countCells, matrix)
  const buttonCoords = {
    x: blankCoords.x,
    y: blankCoords.y,
  }

  const direction = event.key
  const maxIndexMatrix = matrix.length
  switch (direction) {
    case 'ArrowUp':
      buttonCoords.y += 1
      break
    case 'ArrowDown':
      buttonCoords.y -= 1
      break
    case 'ArrowLeft':
      buttonCoords.x += 1
      break
    case 'ArrowRight':
      buttonCoords.x -= 1
      break
  }

  if (
    buttonCoords.y >= maxIndexMatrix ||
    buttonCoords.y < 0 ||
    buttonCoords.x >= maxIndexMatrix ||
    buttonCoords.x < 0
  ) {
    return
  }

  changeAudio(playAudio)

  swap(blankCoords, buttonCoords, matrix)
  setPositionCells(matrix)
})

// показать время и движения

function formatDate(time) {
  const date = new Date(2022, 0, 1)
  date.setSeconds(time)
  return date.toTimeString().replace(/.*(\d{2}:\d{2}).*/, '$1')
}
// таймер
function startTimer() {
  setInterval(() => {
    startTime && time++
    document.querySelector('.time').innerHTML = `Time: ${formatDate(time)}`
  }, 1000)
}

function changeMoves() {
  moveCounter++
  document.querySelector('.moves').innerHTML = `Moves: ${moveCounter}`
}

startTimer()
// функция-счетчик времени и движений
function showMovesAndTime() {
  time = 0
  timeWrapper.innerHTML = 'Time: 00:00'
  startTime = true

  moveCounter = 0
  document.querySelector('.moves').innerHTML = `Moves: ${moveCounter}`
}

// добавляем аудио

soundBtn.addEventListener('click', () => {
  playAudio = !playAudio

  if (playAudio) {
    soundBtn.innerHTML = 'mute'
  } else {
    soundBtn.innerHTML = 'unmute'
  }
})

function changeAudio(playAudio) {
  const audio = new Audio()
  audio.src = 'assets/sounds/mclick.mp3'

  audio.autoplay = playAudio
}

// показать победителя

function createWinModal() {
  const modalContainer = document.createElement('div')
  modalContainer.className = 'modal-overlay'
  document.body.append(modalContainer)

  const modal = document.createElement('div')
  modal.className = 'modal'
  modalContainer.append(modal)

  const modalContent = document.createElement('div')
  modalContent.className = 'modal-content'
  modal.append(modalContent)

  const modalTitle = document.createElement('h2')
  modalTitle.innerHTML = `Hooray! You solved the puzzle in ${formatDate(
    time
  )} and ${moveCounter} moves!`
  modalContent.append(modalTitle)
}
// удаление модального окна
function removeModal() {
  const modalShadow = document.querySelector('.modal-overlay')

  modalShadow.addEventListener('click', (event) => {
    if (event.target.classList.contains('modal-overlay')) {
      modalShadow.remove()
      shuffleCells()
    showMovesAndTime()
    }
  })
}

// функции для свапа и сдвига`

function getMatrix(arr) {
  const matrix = []

  for (let i = 0; i < sizeCell; i++) {
    matrix.push([])
  }

  let x = 0
  let y = 0

  for (i = 0; i < arr.length; i++) {
    if (x >= sizeCell) {
      y++
      x = 0
    }
    matrix[y][x] = arr[i]
    x++
  }
  return matrix
}

function setPositionCells(matrix) {
  for (let y = 0; y < matrix.length; y++) {
    for (let x = 0; x < matrix[y].length; x++) {
      const value = matrix[y][x]
      const node = itemNodes[value - 1]
      setNodeStyles(node, x, y)
    }
  }
}

function setNodeStyles(node, x, y) {
  const shiftStep = 100
  node.style.transform = `translate3D(${x * shiftStep}%,${y * shiftStep}%,0)`
}

function findCoordinatesByNumber(number, matrix) {
  for (let y = 0; y < matrix.length; y++) {
    for (let x = 0; x < matrix[y].length; x++) {
      if (matrix[y][x] === number) {
        return { x, y }
      }
    }
  }
  return null
}

function isValidForSwap(coords1, coords2) {
  const diffX = Math.abs(coords1.x - coords2.x)
  const diffY = Math.abs(coords1.y - coords2.y)

  return (
    (diffX === 1 || diffY === 1) &&
    (coords1.x === coords2.x || coords1.y === coords2.y)
  )
}

function swap(coords1, coords2, matrix) {
  const coords1Number = matrix[coords1.y][coords1.x]
  matrix[coords1.y][coords1.x] = matrix[coords2.y][coords2.x]
  matrix[coords2.y][coords2.x] = coords1Number

  changeMoves()

  if (checkWin(matrix)) {
    createWinModal()
    removeModal()
    startTime = false

    addWinDate()
  }
}

function checkWin(matrix) {
  const winFlatArr = new Array(countCells).fill(0).map((_item, i) => i + 1)

  const flatMatrix = matrix.flat()
  for (let i = 0; i < winFlatArr.length; i++) {
    if (flatMatrix[i] !== winFlatArr[i]) {
      return false
    }
  }
  return true
}

function addWinDate() {
  resultArray.push({
    typeGame: gameType,
    time: formatDate(time),
    moves: moveCounter,
  })

  resultArray.sort((a, b) => {
    return a.moves - b.moves
  })

  if (resultArray.length > 10) {
    resultArray.length = 10
  }

  setLocalStorage()
}

// Модальное окно результата

function createResultModal() {
  const modalContainer = document.createElement('div')
  modalContainer.className = 'modal-overlay'
  document.body.append(modalContainer)

  const modal = document.createElement('div')
  modal.className = 'modal'
  modalContainer.append(modal)

  const modalContent = document.createElement('div')
  modalContent.className = 'modal-content'
  modal.append(modalContent)

  const modalTitle = document.createElement('h2')
  modalTitle.innerHTML = `Your result`
  modalContent.append(modalTitle)
}

resBtn.addEventListener('click', () => {
  createResultModal()
  removeModal()

  if (localStorage.getItem('resultArray')) {
    resultArray = JSON.parse(localStorage.getItem('resultArray'))

    resultArray.forEach((value, index) => {
      const modalContent = document.querySelector('.modal-content')
      const modalResult = document.createElement('p')

      modalResult.innerHTML = `${index + 1}${'.'} Type: ${value.typeGame} x ${
        value.typeGame
      }, Time: ${value.time}, Moves: ${value.moves}`
      modalContent.append(modalResult)
    })
  }
})

function setLocalStorage() {
  localStorage.setItem('resultArray', JSON.stringify(resultArray))
}

function getLocalStorage() {
  if (localStorage.getItem('resultArray')) {
    resultArray = JSON.parse(localStorage.getItem('resultArray'))
  }
}

window.addEventListener('load', getLocalStorage)

saveBtn.addEventListener('click', () => {
  localStorage.setItem('matrix', JSON.stringify(matrix))
  localStorage.setItem('gameType', gameType)
  localStorage.setItem('moves', moveCounter)
  localStorage.setItem('time', time)
  localStorage.setItem('audio', playAudio)
})

loadBtn.addEventListener('click', () => {
  if (localStorage.getItem('matrix')) {
    playGame = true
    matrix = JSON.parse(localStorage.getItem('matrix'))
    gameType = localStorage.getItem('gameType')
    moveCounter = localStorage.getItem('moves')
    time = localStorage.getItem('time')
    playAudio = localStorage.getItem('audio')

    addItemNodes(gameType)
    setPositionCells(matrix)
    document.querySelector('.moves').innerHTML = `Moves: ${moveCounter}`
  }
  playGame = false
})
